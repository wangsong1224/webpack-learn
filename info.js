const path = require('path');
const webpackConfig = {
  //========输入输出============
  /**
   * 定义项目入口,会根据入口文件找到所有依赖
   */
  entry: [],
  /**
   * 项目执行的上下文路径, 会将入口的根路径指向 context 指定的路径
   */
  context: path.resolve(__dirname, 'app'),
  /**
   * 配置输出的路径,名称等
   */
  output: [],
  //========输入输出============


  //========模块处理============
  /**
   * 用于配置模块[路径]解析规则,帮助 webpack 更精准更高效的找到指定模块
   * 
   */
  resolve: {
    /**
     * resolve.alias 优先级高于其它模块解析方式。
     */
    alisa: {}
  },
  /**
   * 用于配置模块加载规则,主要是用什么 loader 解析
   */
  module: {
    rules: []
  },
  /**
   * 用于声明的外部资源,webpack 直接忽略这些资源 跳过这些资源的解析,打包操作
   */
  externals: {},
  //========模块处理============


  //========后处理============
  /**
   * 用于控制如何优化产物包体积
   * Dead Code Elimination 删除文件中未使用的部分
   * Scope Hoisting 作用域提升,文件中定义的内容被直接注入文件对应的模块中
   * 代码混淆
   * 代码压缩
   * 等
   */
  optimization: {},
  /** 
   * 用于配置编译产物的目标运行环境，支持 web、node、electron 等值，不同值最终产物会有所差异
  */
  target: {},
  /** 
   * 编译模式短语，支持 development、production 等值，可以理解为一种声明环境的短语
  */
  mode: {},
  //========后处理============

  //========开发者工具============
  /**
   * 用于配置 HMR 强相关的开发服务器功能
   */
  devServer: {
    /**
     * 代理
     */
    proxy: {

    },

  },
  /**
   * webpack5 之后,用于配置如何缓存编译过程信息和编译结果
   */
  cache: {},
  /**
   * 用于配置当产物大小超过阈值时,如何通知开发者
   */
  performance: {

  },
  /**
   * 用于精准的控制编译过程的日志内容,在比较细致的性能调试的时候有用
   */
  stats: {},
  /**
   * 用于控制日志的输出方式,例如可以通过该配置将日志输出到磁盘文件
   */
  infrastructureLogging: {},
  //========开发者工具============
}